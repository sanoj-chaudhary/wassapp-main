{"ast":null,"code":"import _Date$now from \"@babel/runtime-corejs3/core-js-stable/date/now\";\nimport \"core-js/modules/es.function.name.js\";\nimport { useCallback, useLayoutEffect, useMemo, useRef } from 'react';\nimport debounceFn from './debounce';\n\nvar EventSpy = function EventSpy(_ref) {\n  var debounce = _ref.debounce,\n      name = _ref.name,\n      onEvent = _ref.onEvent,\n      target = _ref.target; // We need to save the \"onEvent\" to ref.\n  // This is because \"onEvent\" may change from time to time, but debounce may still fire to the older callback.\n\n  var onEventRef = useRef();\n  onEventRef.current = onEvent;\n  var debouncer = useMemo(function () {\n    return debounceFn(function (event) {\n      var current = onEventRef.current;\n      current && current(event);\n    }, debounce);\n  }, [debounce, onEventRef]);\n  var handleEvent = useCallback(function (event) {\n    event.timeStampLow = _Date$now();\n    debouncer(event);\n  }, [debouncer]);\n  useLayoutEffect(function () {\n    target.addEventListener(name, handleEvent, {\n      passive: true\n    });\n    handleEvent({\n      target: target,\n      type: name\n    });\n    return function () {\n      return target.removeEventListener(name, handleEvent);\n    };\n  }, [name, handleEvent, target]);\n  return false;\n};\n\nEventSpy.defaultProps = {\n  debounce: 200\n};\nexport default EventSpy;","map":null,"metadata":{},"sourceType":"module"}