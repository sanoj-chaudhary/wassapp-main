{"ast":null,"code":"import _defineProperty from \"@babel/runtime-corejs3/helpers/defineProperty\";\nimport _toConsumableArray from \"@babel/runtime-corejs3/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime-corejs3/helpers/slicedToArray\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = _Object$keys(object);\n\n  if (_Object$getOwnPropertySymbols) {\n    var symbols = _Object$getOwnPropertySymbols(object);\n\n    if (enumerableOnly) {\n      symbols = _filterInstanceProperty(symbols).call(symbols, function (sym) {\n        return _Object$getOwnPropertyDescriptor(object, sym).enumerable;\n      });\n    }\n\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      var _context21;\n\n      _forEachInstanceProperty(_context21 = ownKeys(Object(source), true)).call(_context21, function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (_Object$getOwnPropertyDescriptors) {\n      _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source));\n    } else {\n      var _context22;\n\n      _forEachInstanceProperty(_context22 = ownKeys(Object(source))).call(_context22, function (key) {\n        _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.string.replace.js\";\nimport _setInterval from \"@babel/runtime-corejs3/core-js-stable/set-interval\";\nimport _indexOfInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/index-of\";\nimport _spliceInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/splice\";\nimport _concatInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/concat\";\nimport _Date$now from \"@babel/runtime-corejs3/core-js-stable/date/now\";\nimport _forEachInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/for-each\";\nimport _Object$keys from \"@babel/runtime-corejs3/core-js-stable/object/keys\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs3/core-js-stable/object/get-own-property-symbols\";\nimport _filterInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/filter\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptors\";\nimport _Object$defineProperties from \"@babel/runtime-corejs3/core-js-stable/object/define-properties\";\nimport _Object$defineProperty from \"@babel/runtime-corejs3/core-js-stable/object/define-property\";\nimport createEmotion from '@emotion/css/create-instance';\nimport PropTypes from 'prop-types';\nimport React, { useCallback, useEffect, useMemo, useRef, useState } from 'react';\nimport createCSSKey from '../createCSSKey';\nimport createDebug from '../utils/debug';\nimport EventSpy from '../EventSpy';\nimport FunctionContext from './FunctionContext';\nimport InternalContext from './InternalContext';\nimport SpineTo from '../SpineTo';\nimport State1Context from './State1Context';\nimport State2Context from './State2Context';\nimport StateContext from './StateContext';\nimport styleConsole from '../utils/styleConsole';\nimport useStateRef from '../hooks/internal/useStateRef';\n\nvar DEFAULT_SCROLLER = function DEFAULT_SCROLLER() {\n  return Infinity;\n};\n\nvar MIN_CHECK_INTERVAL = 17; // 1 frame\n\nvar MODE_BOTTOM = 'bottom';\nvar MODE_TOP = 'top';\nvar NEAR_END_THRESHOLD = 1;\nvar SCROLL_DECISION_DURATION = 34; // 2 frames\n// We pool the emotion object by nonce.\n// This is to make sure we don't generate too many unneeded <style> tags.\n\nvar emotionPool = {};\n\nfunction setImmediateInterval(fn, ms) {\n  fn();\n  return _setInterval(fn, ms);\n}\n\nfunction computeViewState(_ref) {\n  var mode = _ref.mode,\n      _ref$target = _ref.target,\n      offsetHeight = _ref$target.offsetHeight,\n      scrollHeight = _ref$target.scrollHeight,\n      scrollTop = _ref$target.scrollTop;\n  var atBottom = scrollHeight - scrollTop - offsetHeight < NEAR_END_THRESHOLD;\n  var atTop = scrollTop < NEAR_END_THRESHOLD;\n  var atEnd = mode === MODE_TOP ? atTop : atBottom;\n  var atStart = mode !== MODE_TOP ? atTop : atBottom;\n  return {\n    atBottom: atBottom,\n    atEnd: atEnd,\n    atStart: atStart,\n    atTop: atTop\n  };\n}\n\nfunction isEnd(animateTo, mode) {\n  return animateTo === (mode === MODE_TOP ? 0 : '100%');\n}\n\nvar Composer = function Composer(_ref2) {\n  var checkInterval = _ref2.checkInterval,\n      children = _ref2.children,\n      debounce = _ref2.debounce,\n      debugFromProp = _ref2.debug,\n      initialScrollBehavior = _ref2.initialScrollBehavior,\n      mode = _ref2.mode,\n      nonce = _ref2.nonce,\n      scroller = _ref2.scroller;\n  var debug = useMemo(function () {\n    return createDebug(\"<ScrollToBottom>\", {\n      force: debugFromProp\n    });\n  }, [debugFromProp]);\n  mode = mode === MODE_TOP ? MODE_TOP : MODE_BOTTOM;\n  var ignoreScrollEventBeforeRef = useRef(0);\n  var initialScrollBehaviorRef = useRef(initialScrollBehavior);\n\n  var _useStateRef = useStateRef(mode === MODE_TOP ? 0 : '100%'),\n      _useStateRef2 = _slicedToArray(_useStateRef, 3),\n      animateTo = _useStateRef2[0],\n      setAnimateTo = _useStateRef2[1],\n      animateToRef = _useStateRef2[2];\n\n  var _useStateRef3 = useStateRef(null),\n      _useStateRef4 = _slicedToArray(_useStateRef3, 3),\n      target = _useStateRef4[0],\n      setTarget = _useStateRef4[1],\n      targetRef = _useStateRef4[2]; // Internal context\n\n\n  var animateFromRef = useRef(0);\n  var offsetHeightRef = useRef(0);\n  var scrollHeightRef = useRef(0); // State context\n\n  var _useState = useState(true),\n      _useState2 = _slicedToArray(_useState, 2),\n      atBottom = _useState2[0],\n      setAtBottom = _useState2[1];\n\n  var _useState3 = useState(true),\n      _useState4 = _slicedToArray(_useState3, 2),\n      atEnd = _useState4[0],\n      setAtEnd = _useState4[1];\n\n  var _useState5 = useState(true),\n      _useState6 = _slicedToArray(_useState5, 2),\n      atTop = _useState6[0],\n      setAtTop = _useState6[1];\n\n  var _useState7 = useState(false),\n      _useState8 = _slicedToArray(_useState7, 2),\n      atStart = _useState8[0],\n      setAtStart = _useState8[1];\n\n  var _useStateRef5 = useStateRef(true),\n      _useStateRef6 = _slicedToArray(_useStateRef5, 3),\n      sticky = _useStateRef6[0],\n      setSticky = _useStateRef6[1],\n      stickyRef = _useStateRef6[2]; // High-rate state context\n\n\n  var scrollPositionObserversRef = useRef([]);\n  var observeScrollPosition = useCallback(function (fn) {\n    var target = targetRef.current;\n    scrollPositionObserversRef.current.push(fn);\n    target && fn({\n      scrollTop: target.scrollTop\n    });\n    return function () {\n      var scrollPositionObservers = scrollPositionObserversRef.current;\n\n      var index = _indexOfInstanceProperty(scrollPositionObservers).call(scrollPositionObservers, fn);\n\n      ~index && _spliceInstanceProperty(scrollPositionObservers).call(scrollPositionObservers, index, 1);\n    };\n  }, [scrollPositionObserversRef, targetRef]);\n  var handleSpineToEnd = useCallback(function () {\n    var animateTo = animateToRef.current;\n    debug(function () {\n      var _context;\n\n      return _concatInstanceProperty(_context = ['%cSpineTo%c: %conEnd%c is fired.']).call(_context, _toConsumableArray(styleConsole('magenta')), _toConsumableArray(styleConsole('orange')), [{\n        animateTo: animateTo\n      }]);\n    });\n    ignoreScrollEventBeforeRef.current = _Date$now(); // handleScrollEnd may end at a position which should lose stickiness.\n    // In that case, we will need to set sticky to false to stop the interval check.\n    // Test case:\n    // 1. Add a scroller that always return 0\n    // 2. Show a panel with mode === MODE_BOTTOM\n    // 3. Programmatically scroll to 0 (set element.scrollTop = 0)\n    // Expected: it should not repetitively call scrollTo(0)\n    //           it should set stickiness to false\n\n    isEnd(animateTo, mode) || setSticky(false);\n    setAnimateTo(null);\n  }, [animateToRef, debug, ignoreScrollEventBeforeRef, mode, setAnimateTo, setSticky]); // Function context\n\n  var scrollTo = useCallback(function (nextAnimateTo) {\n    var _ref3 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n        behavior = _ref3.behavior;\n\n    var target = targetRef.current;\n\n    if (typeof nextAnimateTo !== 'number' && nextAnimateTo !== '100%') {\n      return console.warn('react-scroll-to-bottom: Arguments passed to scrollTo() must be either number or \"100%\".');\n    } // If it is trying to scroll to a position which is not \"atEnd\", it should set sticky to false after scroll ended.\n\n\n    debug(function () {\n      var _context2;\n\n      return [_concatInstanceProperty(_context2 = [\"%cscrollTo%c: Will scroll to %c\".concat(typeof nextAnimateTo === 'number' ? nextAnimateTo + 'px' : nextAnimateTo.replace(/%/g, '%%'), \"%c\")]).call(_context2, _toConsumableArray(styleConsole('lime', '')), _toConsumableArray(styleConsole('purple'))), {\n        behavior: behavior,\n        nextAnimateTo: nextAnimateTo,\n        target: target\n      }];\n    });\n\n    if (behavior === 'auto') {\n      // Stop any existing animation\n      handleSpineToEnd();\n\n      if (target) {\n        // Jump to the scroll position\n        target.scrollTop = nextAnimateTo === '100%' ? target.scrollHeight - target.offsetHeight : nextAnimateTo;\n      }\n    } else {\n      behavior !== 'smooth' && console.warn('react-scroll-to-bottom: Please set \"behavior\" when calling \"scrollTo\". In future versions, the default behavior will be changed from smooth scrolling to discrete scrolling to align with HTML Standard.');\n      setAnimateTo(nextAnimateTo);\n    } // This is for handling a case. When calling scrollTo('100%', { behavior: 'auto' }) multiple times, it would lose stickiness.\n\n\n    if (isEnd(nextAnimateTo, mode)) {\n      debug(function () {\n        var _context3;\n\n        return [_concatInstanceProperty(_context3 = [\"%cscrollTo%c: Scrolling to end, will set sticky to %ctrue%c.\"]).call(_context3, _toConsumableArray(styleConsole('lime', '')), _toConsumableArray(styleConsole('purple'))), [{\n          mode: mode,\n          nextAnimateTo: nextAnimateTo\n        }]];\n      });\n      setSticky(true);\n    }\n  }, [debug, handleSpineToEnd, mode, setAnimateTo, setSticky, targetRef]);\n  var scrollToBottom = useCallback(function () {\n    var _ref4 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n        behavior = _ref4.behavior;\n\n    debug(function () {\n      var _context4;\n\n      return _concatInstanceProperty(_context4 = ['%cscrollToBottom%c: Called']).call(_context4, _toConsumableArray(styleConsole('yellow', '')));\n    });\n    behavior !== 'smooth' && console.warn('react-scroll-to-bottom: Please set \"behavior\" when calling \"scrollToBottom\". In future versions, the default behavior will be changed from smooth scrolling to discrete scrolling to align with HTML Standard.');\n    scrollTo('100%', {\n      behavior: behavior || 'smooth'\n    });\n  }, [debug, scrollTo]);\n  var scrollToTop = useCallback(function () {\n    var _ref5 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n        behavior = _ref5.behavior;\n\n    debug(function () {\n      var _context5;\n\n      return _concatInstanceProperty(_context5 = ['%cscrollToTop%c: Called']).call(_context5, _toConsumableArray(styleConsole('yellow', '')));\n    });\n    behavior !== 'smooth' && console.warn('react-scroll-to-bottom: Please set \"behavior\" when calling \"scrollToTop\". In future versions, the default behavior will be changed from smooth scrolling to discrete scrolling to align with HTML Standard.');\n    scrollTo(0, {\n      behavior: behavior || 'smooth'\n    });\n  }, [debug, scrollTo]);\n  var scrollToEnd = useCallback(function () {\n    var _ref6 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n        behavior = _ref6.behavior;\n\n    debug(function () {\n      var _context6;\n\n      return _concatInstanceProperty(_context6 = ['%cscrollToEnd%c: Called']).call(_context6, _toConsumableArray(styleConsole('yellow', '')));\n    });\n    behavior !== 'smooth' && console.warn('react-scroll-to-bottom: Please set \"behavior\" when calling \"scrollToEnd\". In future versions, the default behavior will be changed from smooth scrolling to discrete scrolling to align with HTML Standard.');\n    var options = {\n      behavior: behavior || 'smooth'\n    };\n    mode === MODE_TOP ? scrollToTop(options) : scrollToBottom(options);\n  }, [debug, mode, scrollToBottom, scrollToTop]);\n  var scrollToStart = useCallback(function () {\n    var _ref7 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n        behavior = _ref7.behavior;\n\n    debug(function () {\n      var _context7;\n\n      return _concatInstanceProperty(_context7 = ['%cscrollToStart%c: Called']).call(_context7, _toConsumableArray(styleConsole('yellow', '')));\n    });\n    behavior !== 'smooth' && console.warn('react-scroll-to-bottom: Please set \"behavior\" when calling \"scrollToStart\". In future versions, the default behavior will be changed from smooth scrolling to discrete scrolling to align with HTML Standard.');\n    var options = {\n      behavior: behavior || 'smooth'\n    };\n    mode === MODE_TOP ? scrollToBottom(options) : scrollToTop(options);\n  }, [debug, mode, scrollToBottom, scrollToTop]);\n  var scrollToSticky = useCallback(function () {\n    var target = targetRef.current;\n\n    if (target) {\n      if (initialScrollBehaviorRef.current === 'auto') {\n        debug(function () {\n          var _context8;\n\n          return _concatInstanceProperty(_context8 = [\"%ctarget changed%c: Initial scroll\"]).call(_context8, _toConsumableArray(styleConsole('blue')));\n        });\n        target.scrollTop = mode === MODE_TOP ? 0 : target.scrollHeight - target.offsetHeight;\n        initialScrollBehaviorRef.current = false;\n        return;\n      } // This is very similar to scrollToEnd().\n      // Instead of scrolling to end, it will call props.scroller() to determines how far it should scroll.\n      // This function could be called while it is auto-scrolling.\n\n\n      var animateFrom = animateFromRef.current;\n      var offsetHeight = target.offsetHeight,\n          scrollHeight = target.scrollHeight,\n          scrollTop = target.scrollTop;\n      var maxValue = mode === MODE_TOP ? 0 : Math.max(0, scrollHeight - offsetHeight - scrollTop);\n      var minValue = Math.max(0, animateFrom - scrollTop);\n      var rawNextValue = scroller({\n        maxValue: maxValue,\n        minValue: minValue,\n        offsetHeight: offsetHeight,\n        scrollHeight: scrollHeight,\n        scrollTop: scrollTop\n      });\n      var nextValue = Math.max(0, Math.min(maxValue, rawNextValue));\n      var nextAnimateTo;\n\n      if (mode === MODE_TOP || nextValue !== maxValue) {\n        nextAnimateTo = scrollTop + nextValue;\n      } else {\n        // When scrolling to bottom, we should scroll to \"100%\".\n        // Otherwise, if we scroll to any number, it will lose stickiness when elements are adding too fast.\n        // \"100%\" is a special argument intended to make sure stickiness is not lost while new elements are being added.\n        nextAnimateTo = '100%';\n      }\n\n      debug(function () {\n        var _context9, _context10, _context11;\n\n        return [_concatInstanceProperty(_context9 = [_concatInstanceProperty(_context10 = _concatInstanceProperty(_context11 = \"%cscrollToSticky%c: Will animate from %c\".concat(animateFrom, \"px%c to %c\")).call(_context11, typeof nextAnimateTo === 'number' ? nextAnimateTo + 'px' : nextAnimateTo.replace(/%/g, '%%'), \"%c (%c\")).call(_context10, (nextAnimateTo === '100%' ? maxValue : nextAnimateTo) + animateFrom, \"px%c)\")]).call(_context9, _toConsumableArray(styleConsole('orange')), _toConsumableArray(styleConsole('purple')), _toConsumableArray(styleConsole('purple')), _toConsumableArray(styleConsole('purple'))), {\n          animateFrom: animateFrom,\n          maxValue: maxValue,\n          minValue: minValue,\n          nextAnimateTo: nextAnimateTo,\n          nextValue: nextValue,\n          offsetHeight: offsetHeight,\n          rawNextValue: rawNextValue,\n          scrollHeight: scrollHeight,\n          scrollTop: scrollTop\n        }];\n      });\n      scrollTo(nextAnimateTo, {\n        behavior: 'smooth'\n      });\n    }\n  }, [animateFromRef, debug, mode, scroller, scrollTo, targetRef]);\n  var handleScroll = useCallback(function (_ref8) {\n    var _context17;\n\n    var timeStampLow = _ref8.timeStampLow;\n    var animateTo = animateToRef.current;\n    var target = targetRef.current;\n    var animating = animateTo !== null; // Currently, there are no reliable way to check if the \"scroll\" event is trigger due to\n    // user gesture, programmatic scrolling, or Chrome-synthesized \"scroll\" event to compensate size change.\n    // Thus, we use our best-effort to guess if it is triggered by user gesture, and disable sticky if it is heading towards the start direction.\n\n    if (timeStampLow <= ignoreScrollEventBeforeRef.current || !target) {\n      // Since we debounce \"scroll\" event, this handler might be called after spineTo.onEnd (a.k.a. artificial scrolling).\n      // We should ignore debounced event fired after scrollEnd, because without skipping them, the userInitiatedScroll calculated below will not be accurate.\n      // Thus, on a fast machine, adding elements super fast will lose the \"stickiness\".\n      return;\n    }\n\n    var _computeViewState = computeViewState({\n      mode: mode,\n      target: target\n    }),\n        atBottom = _computeViewState.atBottom,\n        atEnd = _computeViewState.atEnd,\n        atStart = _computeViewState.atStart,\n        atTop = _computeViewState.atTop;\n\n    setAtBottom(atBottom);\n    setAtEnd(atEnd);\n    setAtStart(atStart);\n    setAtTop(atTop); // Chrome will emit \"synthetic\" scroll event if the container is resized or an element is added\n    // We need to ignore these \"synthetic\" events\n    // Repro: In playground, press 4-1-5-1-1 (small, add one, normal, add one, add one)\n    //        Nomatter how fast or slow the sequence is being pressed, it should still stick to the bottom\n\n    var nextOffsetHeight = target.offsetHeight,\n        nextScrollHeight = target.scrollHeight;\n    var offsetHeight = offsetHeightRef.current;\n    var scrollHeight = scrollHeightRef.current;\n    var offsetHeightChanged = nextOffsetHeight !== offsetHeight;\n    var scrollHeightChanged = nextScrollHeight !== scrollHeight;\n\n    if (offsetHeightChanged) {\n      offsetHeightRef.current = nextOffsetHeight;\n    }\n\n    if (scrollHeightChanged) {\n      scrollHeightRef.current = nextScrollHeight;\n    } // Sticky means:\n    // - If it is scrolled programatically, we are still in sticky mode\n    // - If it is scrolled by the user, then sticky means if we are at the end\n    // Only update stickiness if the scroll event is not due to synthetic scroll done by Chrome\n\n\n    if (!offsetHeightChanged && !scrollHeightChanged) {\n      // We are sticky if we are animating to the end, or we are already at the end.\n      // We can be \"animating but not sticky\" by calling \"scrollTo(100)\" where the container scrollHeight is 200px.\n      var nextSticky = animating && isEnd(animateTo, mode) || atEnd;\n\n      if (stickyRef.current !== nextSticky) {\n        debug(function () {\n          var _context12, _context13, _context14, _context15;\n\n          return [_concatInstanceProperty(_context12 = [\"%conScroll%c: %csetSticky%c(%c\".concat(nextSticky, \"%c)\")]).call(_context12, _toConsumableArray(styleConsole('red')), _toConsumableArray(styleConsole('red')), _toConsumableArray(styleConsole('purple'))), _concatInstanceProperty(_context13 = [_concatInstanceProperty(_context14 = _concatInstanceProperty(_context15 = \"(animating = %c\".concat(animating, \"%c && isEnd = %c\")).call(_context15, isEnd(animateTo, mode), \"%c) || atEnd = %c\")).call(_context14, atEnd, \"%c\")]).call(_context13, _toConsumableArray(styleConsole('purple')), _toConsumableArray(styleConsole('purple')), _toConsumableArray(styleConsole('purple')), [{\n            animating: animating,\n            animateTo: animateTo,\n            atEnd: atEnd,\n            mode: mode,\n            offsetHeight: target.offsetHeight,\n            scrollHeight: target.scrollHeight,\n            sticky: stickyRef.current,\n            nextSticky: nextSticky\n          }])];\n        });\n        setSticky(nextSticky);\n      }\n    } else if (stickyRef.current) {\n      debug(function () {\n        var _context16;\n\n        return [_concatInstanceProperty(_context16 = [\"%conScroll%c: Size changed while sticky, calling %cscrollToSticky()%c\"]).call(_context16, _toConsumableArray(styleConsole('red')), _toConsumableArray(styleConsole('orange')), [{\n          offsetHeightChanged: offsetHeightChanged,\n          scrollHeightChanged: scrollHeightChanged\n        }]), {\n          nextOffsetHeight: nextOffsetHeight,\n          prevOffsetHeight: offsetHeight,\n          nextScrollHeight: nextScrollHeight,\n          prevScrollHeight: scrollHeight\n        }];\n      });\n      scrollToSticky();\n    }\n\n    var actualScrollTop = target.scrollTop;\n\n    _forEachInstanceProperty(_context17 = scrollPositionObserversRef.current).call(_context17, function (observer) {\n      return observer({\n        scrollTop: actualScrollTop\n      });\n    });\n  }, [animateToRef, debug, ignoreScrollEventBeforeRef, mode, offsetHeightRef, scrollHeightRef, scrollPositionObserversRef, scrollToSticky, setAtBottom, setAtEnd, setAtStart, setAtTop, setSticky, stickyRef, targetRef]);\n  useEffect(function () {\n    if (target) {\n      var stickyButNotAtEndSince = false;\n      var timeout = setImmediateInterval(function () {\n        var target = targetRef.current;\n        var animating = animateToRef.current !== null;\n\n        if (stickyRef.current) {\n          if (!computeViewState({\n            mode: mode,\n            target: target\n          }).atEnd) {\n            if (!stickyButNotAtEndSince) {\n              stickyButNotAtEndSince = _Date$now();\n            } else if (_Date$now() - stickyButNotAtEndSince > SCROLL_DECISION_DURATION) {\n              // Quirks: In Firefox, after user scroll down, Firefox do two things:\n              //         1. Set to a new \"scrollTop\"\n              //         2. Fire \"scroll\" event\n              //         For what we observed, #1 is fired about 20ms before #2. There is a chance that this stickyCheckTimeout is being scheduled between 1 and 2.\n              //         That means, if we just look at #1 to decide if we should scroll, we will always scroll, in oppose to the user's intention.\n              // Repro: Open Firefox, set checkInterval to a lower number, and try to scroll by dragging the scroll handler. It will jump back.\n              // The \"animating\" check will make sure stickiness is not lost when elements are adding at a very fast pace.\n              if (!animating) {\n                animateFromRef.current = target.scrollTop;\n                debug(function () {\n                  var _context18;\n\n                  return _concatInstanceProperty(_context18 = [\"%cInterval check%c: Should sticky but not at end, calling %cscrollToSticky()%c to scroll\"]).call(_context18, _toConsumableArray(styleConsole('navy')), _toConsumableArray(styleConsole('orange')));\n                });\n                scrollToSticky();\n              }\n\n              stickyButNotAtEndSince = false;\n            }\n          } else {\n            stickyButNotAtEndSince = false;\n          }\n        } else if (target.scrollHeight <= target.offsetHeight && !stickyRef.current) {\n          // When the container is emptied, we will set sticky back to true.\n          debug(function () {\n            var _context19;\n\n            return [_concatInstanceProperty(_context19 = [\"%cInterval check%c: Container is emptied, setting sticky back to %ctrue%c\"]).call(_context19, _toConsumableArray(styleConsole('navy')), _toConsumableArray(styleConsole('purple'))), [{\n              offsetHeight: target.offsetHeight,\n              scrollHeight: target.scrollHeight,\n              sticky: stickyRef.current\n            }]];\n          });\n          setSticky(true);\n        }\n      }, Math.max(MIN_CHECK_INTERVAL, checkInterval) || MIN_CHECK_INTERVAL);\n      return function () {\n        return clearInterval(timeout);\n      };\n    }\n  }, [animateToRef, checkInterval, debug, mode, scrollToSticky, setSticky, stickyRef, target, targetRef]);\n  var styleToClassName = useMemo(function () {\n    var emotion = emotionPool[nonce] || (emotionPool[nonce] = createEmotion({\n      key: 'react-scroll-to-bottom--css-' + createCSSKey(),\n      nonce: nonce\n    }));\n    return function (style) {\n      return emotion.css(style) + '';\n    };\n  }, [nonce]);\n  var internalContext = useMemo(function () {\n    return {\n      observeScrollPosition: observeScrollPosition,\n      setTarget: setTarget,\n      styleToClassName: styleToClassName\n    };\n  }, [observeScrollPosition, setTarget, styleToClassName]);\n  var state1Context = useMemo(function () {\n    return {\n      atBottom: atBottom,\n      atEnd: atEnd,\n      atStart: atStart,\n      atTop: atTop,\n      mode: mode\n    };\n  }, [atBottom, atEnd, atStart, atTop, mode]);\n  var state2Context = useMemo(function () {\n    var animating = animateTo !== null;\n    return {\n      animating: animating,\n      animatingToEnd: animating && isEnd(animateTo, mode),\n      sticky: sticky\n    };\n  }, [animateTo, mode, sticky]);\n  var combinedStateContext = useMemo(function () {\n    return _objectSpread(_objectSpread({}, state1Context), state2Context);\n  }, [state1Context, state2Context]);\n  var functionContext = useMemo(function () {\n    return {\n      scrollTo: scrollTo,\n      scrollToBottom: scrollToBottom,\n      scrollToEnd: scrollToEnd,\n      scrollToStart: scrollToStart,\n      scrollToTop: scrollToTop\n    };\n  }, [scrollTo, scrollToBottom, scrollToEnd, scrollToStart, scrollToTop]);\n  useEffect(function () {\n    // We need to update the \"scrollHeight\" value to latest when the user do a focus inside the box.\n    //\n    // This is because:\n    // - In our code that mitigate Chrome synthetic scrolling, that code will look at whether \"scrollHeight\" value is latest or not.\n    // - That code only run on \"scroll\" event.\n    // - That means, on every \"scroll\" event, if the \"scrollHeight\" value is not latest, we will skip modifying the stickiness.\n    // - That means, if the user \"focus\" to an element that cause the scroll view to scroll to the bottom, the user agent will fire \"scroll\" event.\n    //   Since the \"scrollHeight\" is not latest value, this \"scroll\" event will be ignored and stickiness will not be modified.\n    // - That means, if the user \"focus\" to a newly added element that is at the end of the scroll view, the \"scroll to bottom\" button will continue to show.\n    //\n    // Repro in Chrome:\n    // 1. Fill up a scroll view\n    // 2. Scroll up, the \"scroll to bottom\" button should show up\n    // 3. Click \"Add a button\"\n    // 4. Click on the scroll view (to pseudo-focus on it)\n    // 5. Press TAB, the scroll view will be at the bottom\n    //\n    // Expect:\n    // - The \"scroll to bottom\" button should be gone.\n    if (target) {\n      var handleFocus = function handleFocus() {\n        scrollHeightRef.current = target.scrollHeight;\n      };\n\n      target.addEventListener('focus', handleFocus, {\n        capture: true,\n        passive: true\n      });\n      return function () {\n        return target.removeEventListener('focus', handleFocus);\n      };\n    }\n  }, [target]);\n  debug(function () {\n    var _context20;\n\n    return [_concatInstanceProperty(_context20 = [\"%cRender%c: Render\"]).call(_context20, _toConsumableArray(styleConsole('cyan', ''))), {\n      animateTo: animateTo,\n      animating: animateTo !== null,\n      sticky: sticky,\n      target: target\n    }];\n  });\n  return /*#__PURE__*/React.createElement(InternalContext.Provider, {\n    value: internalContext\n  }, /*#__PURE__*/React.createElement(FunctionContext.Provider, {\n    value: functionContext\n  }, /*#__PURE__*/React.createElement(StateContext.Provider, {\n    value: combinedStateContext\n  }, /*#__PURE__*/React.createElement(State1Context.Provider, {\n    value: state1Context\n  }, /*#__PURE__*/React.createElement(State2Context.Provider, {\n    value: state2Context\n  }, children, target && /*#__PURE__*/React.createElement(EventSpy, {\n    debounce: debounce,\n    name: \"scroll\",\n    onEvent: handleScroll,\n    target: target\n  }), target && animateTo !== null && /*#__PURE__*/React.createElement(SpineTo, {\n    name: \"scrollTop\",\n    onEnd: handleSpineToEnd,\n    target: target,\n    value: animateTo\n  }))))));\n};\n\nComposer.defaultProps = {\n  checkInterval: 100,\n  children: undefined,\n  debounce: 17,\n  debug: undefined,\n  initialScrollBehavior: 'smooth',\n  mode: undefined,\n  nonce: undefined,\n  scroller: DEFAULT_SCROLLER\n};\nComposer.propTypes = {\n  checkInterval: PropTypes.number,\n  children: PropTypes.any,\n  debounce: PropTypes.number,\n  debug: PropTypes.bool,\n  initialScrollBehavior: PropTypes.oneOf(['auto', 'smooth']),\n  mode: PropTypes.oneOf(['bottom', 'top']),\n  nonce: PropTypes.string,\n  scroller: PropTypes.func\n};\nexport default Composer;","map":null,"metadata":{},"sourceType":"module"}